# -*- coding: utf-8 -*-
"""DoAn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RzPBRRFYBIQCDn9W1UwlfqkpgIhvRjLA
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import scipy.stats as stats
import warnings
warnings.filterwarnings("ignore")

from sklearn.preprocessing import OrdinalEncoder
from scipy.stats import shapiro
from scipy.stats import stats
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
#classifiaction
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC,SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, confusion_matrix, roc_curve
from sklearn.metrics import accuracy_score, precision_score, recall_score,f1_score

df=pd.read_csv("6 class csv.csv")

print("Dimension of data=>",df.shape)

print("Basic information about the data:-", "\n")
print("*"*50)
df.info()

print("Checking unique values for each feature:-","\n")
print("-"*40)
df.nunique()

print("Checking null values in entire data:-","\n")
print("-"*35)
df.isnull().sum().sum()

"""Không có giá trị Null"""

print("Checking duplicates in entire data:-","\n")
print("-"*35)
df.duplicated().sum()

"""Không có giá trị trùng lặp"""

ax=sns.countplot(data=df, x='Star type', palette="Spectral")

percentages=df['Star type'].value_counts()/len(df)*100

#Annotate bars with percentages
for i,p in enumerate(ax.patches):
   height=p.get_height()
   ax.text(p.get_x()+p.get_width()/2, height+0.5, f'{percentages[i]:.2f}%' , ha="center")

# Show the plot
plt.show()

"""Star type cần bằng về số lượng

Mật độ xác suất của các giá trị nhiệt độ
"""

sns.distplot( x=df["Temperature (K)"])
plt.show()

"""•	Biểu đồ phân bố nhiệt độ theo các loại sao"""

unique_star_types = df["Star type"].unique()

plt.figure(figsize=(12, 9))

for i, star_type in enumerate(unique_star_types):
    filtered_df = df[df["Star type"] == star_type]
    plt.subplot(3, 3, i + 1)
    sns.histplot(data=filtered_df, x="Temperature (K)", kde=True, color="#dd1c77")
    plt.title(f"Distribution of Star Type {star_type}", fontweight="bold", size=13)

plt.tight_layout()
plt.show()

"""Dựa vào độ sáng và nhiệt độ , bán kính và nhiệt độ"""

num_cols=['Luminosity(L/Lo)','Radius(R/Ro)','Absolute magnitude(Mv)','Star type']
num_cols

plt.figure(figsize=(10, 8))  # Increase the figure size for better visibility

# Assuming you want to create a 3x3 grid of plots
for i, col in enumerate(num_cols):
    plt.subplot(2, 2, i + 1)
    sns.regplot(data=df, x="Temperature (K)", y=col)
    corr = round(df[[col, "Temperature (K)"]].corr().iloc[0, 1], 2)
    plt.title(f"Corr {corr} b/w {col} and Temperature (K)", fontweight="bold", fontsize=10)

plt.tight_layout()
plt.show()

"""Sao nóng nhất là: Main Sequence (3), SuperGiants(4), HyperGiants(5)

Dựa vào màu sắc và nhiệt độ, lớp quang phổ và nhiệt độ
"""

cat_cols=df.select_dtypes(include="object").columns.to_list()
cat_cols

plt.figure(figsize=(10, 4))  # Increase the figure size for better visibility

# Assuming you want to create a 3x3 grid of plots
for i, col in enumerate(cat_cols):
    plt.subplot(1, 2, i + 1)
    sns.scatterplot(data=df, x="Temperature (K)", y=col)
    plt.title(f"Relationship b/w {col} and Temperature (K)", fontweight="bold", fontsize=10)

plt.tight_layout()
plt.show()

"""Ngôi sao nóng nhất là blue và lớp quang phổ nóng nhất là O."""

con_cols=['Luminosity(L/Lo)','Radius(R/Ro)','Absolute magnitude(Mv)']

plt.figure(figsize=(11,7))

for i, cols in enumerate(con_cols):
  plt.subplot(2, 2, i+1)
  sns.kdeplot(data=df, x=cols, color="#de2d26")
  plt.title(f"Distubution of {cols}", fontweight="black", size=13 )
plt.tight_layout()
plt.show()

"""Dựa vào độ sáng tuyệt đối"""

plt.figure(figsize=(6,4))

# Create the box plot with the specified figsize
sns.boxplot(data=df, y = 'Absolute magnitude(Mv)', x = 'Star type', palette="dark")

# Show the figure
plt.show()

"""Ngôi sao Nâu (Brown Dwarf - 0) có độ sáng tuyệt đối cao nhất trong tất cả các loại sao

Dựa vào yếu tố màu sắc
"""

figure= plt.figure(figsize=(13,5))
sns.boxenplot(x='Star color',y='Temperature (K)',data=df, palette="pastel")
plt.xticks(rotation=90)
plt.show()

"""Phân tích biểu đồ phân bố của toàn bộ yếu tố"""

sns.pairplot(df, palette="pastel", kind="reg", height=2)
plt.show()

num_cols=["Temperature (K)", "Luminosity(L/Lo)", "Radius(R/Ro)", "Absolute magnitude(Mv)", "Star type"]
corr=df[num_cols].corr()["Star type"].to_frame().sort_values(by="Star type", ascending=False)
corr
sns.heatmap(corr, annot=True)

"""Các đặc trưng Luminosity và Radius có mối tương quan mạnh với việc phận loại sao. Trong khi, nhiệt độ có mối tương quan trung bình và Độ sáng tuyệt đối có mối tương quan thấp với nó.

**Xây dựng mô hình**

Mã hóa cột spectral class
"""

#=OrdinalEncoder(categories=[['M', 'B', 'A', 'F', 'O', 'K', 'G']], dtype="int")

#oe.fit(df[["Spectral Class"]])

#df["Spectral Class"]=oe.transform(df[["Spectral Class"]])

#df.tail()

#df=pd.get_dummies(df, columns=["Star color"], drop_first=True, dtype="int")

#df.tail()

"""XDMH"""

# Đọc tệp CSV
df = pd.read_csv('6 class csv.csv')

# Kiểm tra tên cột
print(df.columns)

# Mã hóa các biến phân loại
label_encoders = {}
for column in ['Star color', 'Spectral Class']:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le
df

X= df.drop(columns=["Star type"], axis=1)
y=df["Star type"]

X_train,X_test,y_train,y_test=train_test_split(X, y, test_size=0.7, random_state=43)

print("x_train==>", X_train.shape)
print("x_test==>",X_test.shape)
print("y_train==>",y_train.shape)
print("y_test==>",y_test.shape)

models = [
    LogisticRegression(),
    SVC(),
    KNeighborsClassifier(),
    RandomForestClassifier(n_jobs=1,n_estimators=5,max_depth=5),
    DecisionTreeClassifier(criterion="entropy", splitter="random",max_depth=5),
    GaussianNB()
]

algorithms = [
    'LogisticRegression', 'SVC', 'KNeighborsClassifier',
    'RandomForestClassifier',
    'DecisionTreeClassifier', 'GaussianNB'
]

results = []

for model, algorithm in zip(models, algorithms):
    # Fit the model on the training data
    model.fit(X_train, y_train)

    # Predict the target values on the test data
    pred = model.predict(X_test)

    # Calculate the accuracy score
    accuracy = accuracy_score(y_test, pred)

    results.append({'Algorithm': algorithm, 'Accuracy': accuracy})

diff_models= pd.DataFrame(results)
diff_models.sort_values('Accuracy',ascending=False).reset_index(drop=True)

print(y_test)

final=pd.DataFrame({"Actual":y_test,"Predict":pred})
final

print(classification_report(y_test, pred))

# Tạo một mẫu dữ liệu test
new_data = {
    'Temperature (K)': [8000],
    'Luminosity (L/Lo)': [2.0],
    'Radius (R/Ro)': [1.8],
    'Absolute magnitude (Mv)': [-2],
    'Star color': ['White'],
    'Spectral Class': ['B']
}

# Chuyển đổi mẫu dữ liệu mới thành DataFrame
new_df = pd.DataFrame(new_data)

# Mã hóa các biến phân loại cho mẫu dữ liệu mới
for column in ['Star color', 'Spectral Class']:
    new_df[column] = label_encoders[column].transform(new_df[column])

# Mã hóa biến 'Star color' bằng get_dummies để đảm bảo khớp với dữ liệu huấn luyện
new_df = pd.get_dummies(new_df, columns=['Star color'])

# Đảm bảo các cột trong new_df khớp với các cột trong dữ liệu huấn luyện
missing_cols = set(X_train.columns) - set(new_df.columns)
for col in missing_cols:
    new_df[col] = 0
new_df = new_df[X_train.columns]

# Dự đoán loại sao cho mẫu dữ liệu mới
predicted_star_type = model.predict(new_df)

print("Predicted Star Type:", predicted_star_type[0])